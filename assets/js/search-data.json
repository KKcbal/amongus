{
  
    
        "post0": {
            "title": "Pandas",
            "content": "before we start this portion of the lesson: . check if you have pip installed since we are going to be installing some libraries today!!!!!! if you arnt sure if you have pip, check it by running this command: . pip . if your terminal says &quot;command not found&quot; or something else on linux, run this: . python3 -m ensurepip --default-pip . Overview: . Pandas is a powerful tool in Python that is used for data analysis and manipulation. In this lesson, we will explore how to use Pandas to work with datasets, analyze them, and visualize the results. . Learning Objectives: . By the end of this lesson, students should be able to: . Understand what Pandas is and why it is useful for data analysis | Load data into Pandas and create tables to store it | Use different functions in Pandas to manipulate data, such as filtering, sorting, and grouping | Visualize data using graphs and charts | . Question . Who here has used numpy???? . what is panda? . Pandas is a Python library used for data analysis and manipulation. | it can handle different types of data, including CSV files and databases. | it also allows you to create tables to store and work with your data. | it has functions for filtering, sorting, and grouping data to make it easier to work with. | it also has tools for visualizing data with graphs and charts. | it is widely used in the industry for data analysis and is a valuable skill to learn. | companies that use Pandas include JPMorgan Chase, Google, NASA, the New York Times, and many others. | . Question #2 &amp; 3: . ps: 0.01 extra credit for those who answer. . which companies use pandas? | what is pandas? | . but why is pandas useful? . it can provides tools for handling and manipulating tabular data, which is a common format for storing and analyzing data. | it can handle different types of data, including CSV files and databases. | it allows you to perform tasks such as filtering, sorting, and grouping data, making it easier to analyze and work with. | it has functions for handling missing data and can fill in or remove missing values, which is important for accurate data analysis. | it also has tools for creating visualizations such as graphs and charts, making it easier to communicate insights from the data. | it is fast and efficient, even for large datasets, which is important for time-critical data analysis. | it is widely used in the industry and has a large community of users and developers, making it easy to find support and resources. | . Question #4: . why is pandas useful? | . how do i flipping use it? its so hard, my puny brain cant understand it . it is actually really simple . here is numpy doing simple math: . import pandas as pd # read the csv file into pandas df = pd.read_csv(&#39;example.csv&#39;) # print the first five rows of the dataframe print(df.head()) # print the average age of the people in the dataset print(&quot;Average age:&quot;, df[&#39;Age&#39;].mean()) # filter the data to show only females females = df[df[&#39;Gender&#39;] == &#39;Female&#39;] print(females) # sort the data by salary in descending order sorted_data = df.sort_values(by=&#39;Salary&#39;, ascending=False) print(sorted_data) . ModuleNotFoundError Traceback (most recent call last) Cell In[2], line 1 -&gt; 1 import pandas as pd 3 # Read the CSV file into a Pandas DataFrame 4 df = pd.read_csv(&#39;example.csv&#39;) ModuleNotFoundError: No module named &#39;pandas&#39; . uh oh!!! no pandas 😢 . if see this error, enter these into your terminal: . pip install wheel pip install pandas . on stack overflow, it said pandas is disturbed through pip as a wheel. so you need that too. . link to full forum if curious: https://stackoverflow.com/questions/33481974/importerror-no-module-named-pandas . ps: do this for this to work on ur laptop: . wget https://raw.githubusercontent.com/KKcbal/amongus/master/_notebooks/files/example.csv . example code on how to load a csv into a chart . import pandas as pd # read the CSV file df = pd.read_csv(&#39;example.csv&#39;) # print the first five rows print(df.head()) # define a function to assign each age to an age group def assign_age_group(age): if age &lt; 30: return &#39;&lt;30&#39; elif age &lt; 40: return &#39;30-40&#39; elif age &lt; 50: return &#39;40-50&#39; else: return &#39;&gt;50&#39; # apply the function to the Age column to create a new column with age groups df[&#39;Age Group&#39;] = df[&#39;Age&#39;].apply(assign_age_group) # group by age group and count the number of people in each group age_counts = df.groupby(&#39;Age Group&#39;)[&#39;Name&#39;].count() # print the age group counts print(age_counts) . Name Age Gender Occupation 0 John Doe 32 Male Engineer 1 Jane Smith 27 Female Teacher 2 Mike Johnson 45 Male Manager 3 Sara Lee 38 Female Doctor 4 David Kim 23 Male Student Age Group 30-40 7 40-50 4 &lt;30 7 Name: Name, dtype: int64 . how to manipulate the data in pandas. . import pandas as pd # load the csv file df = pd.read_csv(&#39;example.csv&#39;) # print the first five rows print(df.head()) # filter the data to include only people aged 30 or older df_filtered = df[df[&#39;Age&#39;] &gt;= 30] # sort the data by age in descending order df_sorted = df.sort_values(&#39;Age&#39;, ascending=False) # group the data by gender and calculate the mean age for each group age_by_gender = df.groupby(&#39;Gender&#39;)[&#39;Age&#39;].mean() # print the filtered data print(df_filtered) # print the sorted data print(df_sorted) # print the mean age by gender print(age_by_gender) . Name Age Gender Occupation 0 John Doe 32 Male Engineer 1 Jane Smith 27 Female Teacher 2 Mike Johnson 45 Male Manager 3 Sara Lee 38 Female Doctor 4 David Kim 23 Male Student Name Age Gender Occupation 0 John Doe 32 Male Engineer 2 Mike Johnson 45 Male Manager 3 Sara Lee 38 Female Doctor 6 Robert Green 41 Male Architect 7 Emily Davis 35 Female Marketing Manager 8 Carlos Hernandez 47 Male Entrepreneur 10 Kevin Lee 31 Male Accountant 12 Jacob Johnson 34 Male Lawyer 13 Maria Rodriguez 39 Female Consultant 15 Victoria Brown 42 Female Human Resources Manager 17 Sophie Lee 30 Female Project Manager Name Age Gender Occupation 8 Carlos Hernandez 47 Male Entrepreneur 2 Mike Johnson 45 Male Manager 15 Victoria Brown 42 Female Human Resources Manager 6 Robert Green 41 Male Architect 13 Maria Rodriguez 39 Female Consultant 3 Sara Lee 38 Female Doctor 7 Emily Davis 35 Female Marketing Manager 12 Jacob Johnson 34 Male Lawyer 0 John Doe 32 Male Engineer 10 Kevin Lee 31 Male Accountant 17 Sophie Lee 30 Female Project Manager 5 Anna Garcia 29 Female Software Developer 14 Mark Taylor 28 Male Web Designer 1 Jane Smith 27 Female Teacher 11 Rachel Baker 26 Female Journalist 9 Melissa Nguyen 25 Female Graphic Designer 16 Ethan Chen 24 Male Research Assistant 4 David Kim 23 Male Student Gender Female 32.333333 Male 33.888889 Name: Age, dtype: float64 . how do i put it into a chart &#128553; . here is how: . import pandas as pd import matplotlib.pyplot as plt # read the CSV file df = pd.read_csv(&#39;example.csv&#39;) # create a bar chart of the number of people in each age group age_groups = [&#39;&lt;30&#39;, &#39;30-40&#39;, &#39;40-50&#39;, &#39;&gt;50&#39;] age_counts = pd.cut(df[&#39;Age&#39;], bins=[0, 30, 40, 50, df[&#39;Age&#39;].max()], labels=age_groups, include_lowest=True).value_counts() plt.bar(age_counts.index, age_counts.values) plt.title(&#39;Number of people in each age group&#39;) plt.xlabel(&#39;Age group&#39;) plt.ylabel(&#39;Number of people&#39;) plt.show() # create a pie chart of the gender distribution gender_counts = df[&#39;Gender&#39;].value_counts() plt.pie(gender_counts.values, labels=gender_counts.index, autopct=&#39;%1.1f%%&#39;) plt.title(&#39;Gender distribution&#39;) plt.show() # create a scatter plot of age vs. income plt.scatter(df[&#39;Age&#39;], df[&#39;Income&#39;]) plt.title(&#39;Age vs. Income&#39;) plt.xlabel(&#39;Age&#39;) plt.ylabel(&#39;Income&#39;) plt.show() . ModuleNotFoundError Traceback (most recent call last) Cell In[55], line 2 1 import pandas as pd -&gt; 2 import matplotlib.pyplot as plt 4 # read the CSV file 5 df = pd.read_csv(&#39;example.csv&#39;) ModuleNotFoundError: No module named &#39;matplotlib&#39; . uh oh!!!! another error!??!!??!?! install this library: . pip install matplotlib . import pandas as pd import matplotlib.pyplot as plt import numpy as np # read the CSV file df = pd.read_csv(&#39;example.csv&#39;) # define age groups age_groups = [&#39;&lt;30&#39;, &#39;30-40&#39;, &#39;40-50&#39;, &#39;&gt;50&#39;] # create a new column with the age group for each person df[&#39;Age Group&#39;] = pd.cut(df[&#39;Age&#39;], bins=[0, 30, 40, 50, np.inf], labels=age_groups, include_lowest=True) # group by age group and count the number of people in each group age_counts = df.groupby(&#39;Age Group&#39;)[&#39;Name&#39;].count() # create a bar chart of the age counts age_counts.plot(kind=&#39;bar&#39;) # set the title and axis labels plt.title(&#39;Number of People in Each Age Group&#39;) plt.xlabel(&#39;Age Group&#39;) plt.ylabel(&#39;Number of People&#39;) # show the chart plt.show() . magic!!!!!! . Hacks . make your own data using your google or chatgpt, should look different than mine. | modify my code or write your own | output your data other than a bar graph. | answer the questions below, the more explained the better. | Questions .",
            "url": "https://kkcbal.github.io/amongus/jupyter/lesson/2023/04/24/pandas.html",
            "relUrl": "/jupyter/lesson/2023/04/24/pandas.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Lesson Plan",
            "content": "",
            "url": "https://kkcbal.github.io/amongus/jupyter/week-30/2023/04/19/Lessonplan.html",
            "relUrl": "/jupyter/week-30/2023/04/19/Lessonplan.html",
            "date": " • Apr 19, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Data Analysis and Predcitive Analysis",
            "content": "Notes - Data Analysis . Data analysis is the process of examining, cleaning, transforming, and modeling data in order to extract useful information and draw conclusions. . The process of data analysis involves many steps . Data collection: Gathering relevant data from various sources. Data cleaning: Removing inconsistencies, errors, or missing values from the data. Data transformation: Converting data into a format that is more suitable for analysis. Data modeling: Using statistical or machine learning techniques to analyze the data. Data visualization: Presenting the results of the analysis in a clear and concise manner using graphs, charts, or other visual aids. . Notes - Predicitive Analysis . Predictive analysis is the process of using data, statistical algorithms, and machine learning techniques to identify the likelihood of future outcomes based on historical data. It is a branch of advanced analytics Predictive analysis involves extracting information from data sets and using it to predict patterns and future trends. It involves analyzing large amounts of data and identifying patterns and relationships that can be used to forecast future outcomes. . Examples . Retail. At present, retailers are probably the leading users of predictive - analytics applications Healthcare Internet of Things Sports Weather Insurance Financial Modeling Social Media Analysis . Notes -khalid . Data analysis is a process of inspecting, cleansing, transforming, and modeling data to discover useful information, draw conclusions, and support decision-making. Numpy and Pandas are two popular Python libraries used in data analysis. . Numpy is a library for numerical computing in Python, providing support for multi-dimensional arrays and matrices. It is used for mathematical operations such as linear algebra, random number generation, and Fourier transform. Numpy also provides functions for data manipulation, filtering, and sorting. . Pandas is a library for data manipulation and analysis, providing data structures and tools for working with structured data. It is built on top of Numpy and provides easy-to-use data structures such as Series (1D array), DataFrame (2D table), and Panel (3D table). Pandas provides functions for data cleaning, transformation, merging, and analysis. . Handwriting recognition is a technology that involves the recognition of handwritten characters or text using machine learning algorithms. TensorFlow is a popular machine learning library that can be used for handwriting recognition. TensorFlow provides an easy-to-use platform for building and training machine learning models, including neural networks. . In order to build a handwriting recognition system, the first step is to collect a large dataset of handwritten characters or text. This dataset can then be preprocessed using libraries such as Numpy and Pandas to prepare it for training. Once the data is preprocessed, a machine learning model can be trained using TensorFlow. The trained model can then be used to recognize handwritten characters or text in new images. . Predictive analysis is a type of data analysis that involves using historical data to make predictions about future events. It involves the use of statistical algorithms and machine learning models to identify patterns in data and make predictions about future trends. Predictive analysis can be used in a variety of fields, such as finance, marketing, and healthcare. . In order to perform predictive analysis, historical data must be collected and preprocessed using libraries such as Numpy and Pandas. Once the data is preprocessed, a machine learning model can be trained using algorithms such as regression, decision trees, or neural networks. The trained model can then be used to make predictions about future events. . Questions to ask . How can Numpy and Pandas be used to preprocess data for predictive analysis? | Can you explain the process of building a handwriting recognition system using TensorFlow? | What machine learning algorithms can be used for predictive analysis, and how do they differ? | Can you discuss some real-world applications of predictive analysis in different industries? | How can Numpy and Pandas be used to manipulate and filter data for more accurate predictions? | What are some challenges associated with handwriting recognition, and how can they be overcome? | Can you explain the role of feature engineering in predictive analysis, and how it can improve model accuracy? | How can machine learning models be deployed in real-time applications for predictive analysis? | Can you discuss some limitations of Numpy and Pandas, and when it might be necessary to use other data analysis tools? | How can predictive analysis be used to improve decision-making and optimize business processes? |",
            "url": "https://kkcbal.github.io/amongus/2023/04/15/eli-and-kahlid-duo.html",
            "relUrl": "/2023/04/15/eli-and-kahlid-duo.html",
            "date": " • Apr 15, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Theme test (ignore this)",
            "content": "Hello World . Hello World . Hello World . Hello World . Hello World . Hello World . . Hello Word . Hello world | . hello world . Hello world . print(&quot;Hello world&quot;) .",
            "url": "https://kkcbal.github.io/amongus/fastpages/markdown/2023/04/08/theme-testing.html",
            "relUrl": "/fastpages/markdown/2023/04/08/theme-testing.html",
            "date": " • Apr 8, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Data Analysis and Predcitive Analysis",
            "content": "Notes - Data Analysis . Data analysis is the process of examining, cleaning, transforming, and modeling data in order to extract useful information and draw conclusions. . The process of data analysis involves many steps . Data collection: Gathering relevant data from various sources. Data cleaning: Removing inconsistencies, errors, or missing values from the data. Data transformation: Converting data into a format that is more suitable for analysis. Data modeling: Using statistical or machine learning techniques to analyze the data. Data visualization: Presenting the results of the analysis in a clear and concise manner using graphs, charts, or other visual aids. . Notes - Predicitive Analysis . Predictive analysis is the process of using data, statistical algorithms, and machine learning techniques to identify the likelihood of future outcomes based on historical data. It is a branch of advanced analytics Predictive analysis involves extracting information from data sets and using it to predict patterns and future trends. It involves analyzing large amounts of data and identifying patterns and relationships that can be used to forecast future outcomes. . Examples . Retail. At present, retailers are probably the leading users of predictive - analytics applications Healthcare Internet of Things Sports Weather Insurance Financial Modeling Social Media Analysis .",
            "url": "https://kkcbal.github.io/amongus/2023/04/03/eli-and-kahlid-duo.html",
            "relUrl": "/2023/04/03/eli-and-kahlid-duo.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Tenser Flow",
            "content": "What is Pandas? . Pandas is an open source Python package which is used for data analysis and machine learning. Pandas is built using numpy which supports it using multidimensional arrays such as what is shown below: . import numpy as np a = np.array([1, 2, 3, 4, 5, 6]) print(a) b = np.reshape( a, # the array to be reshaped (2,3) # dimensions of the new array ) print(b) . [1 2 3 4 5 6] [[1 2 3] [4 5 6]] . Data can then be manipulated using pandas to do all sorts of different things such as data cleaning, statistical analysis, and data visualization. Below is an example of data visualization in a table using pandas. . import pandas as pd pd.__version__ . &#39;1.4.2&#39; . classes = pd.Series([&quot;Mathematics&quot;,&quot;Chemistry&quot;,&quot;Physics&quot;,&quot;History&quot;,&quot;Geography&quot;,&quot;German&quot;]) grades = pd.Series([90,54,77,22,25]) pd.DataFrame({&quot;Classes&quot;: classes, &quot;Grades&quot;: grades}) . Classes Grades . 0 Mathematics | 90.0 | . 1 Chemistry | 54.0 | . 2 Physics | 77.0 | . 3 History | 22.0 | . 4 Geography | 25.0 | . 5 German | NaN | . What is TenserFlow? . Tensor Flow is a machine learning platform which has tools to validate and transform large datasets and also provides standard datasets for machine learning training. . An example of this is the fashion MNIST (Modified National Institute of Standards and Technology) database: . In this dataset there are many pictures which are each28x28 Numpy arrays. . This will train a neural network model to identify pictures of clothing. We will use tf.keras, a high-level API to build and train models in TensorFlow. . import tensorflow as tf # Helper libraries import numpy as np import matplotlib.pyplot as plt print(tf.__version__) . 2.12.0 . We will use the Fashion MNIST dataset which contains 70,000 grayscale images in 10 categories. Here we will load the database. . fashion_mnist = tf.keras.datasets.fashion_mnist (train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data() . Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz 29515/29515 [==============================] - 0s 0us/step Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz 26421880/26421880 [==============================] - 2s 0us/step Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz 5148/5148 [==============================] - 0s 0us/step Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz 4422102/4422102 [==============================] - 0s 0us/step . This dataset loads 4 NumPy arrays: train_images and train_labels arrays are the training set, used for the models to learn test_images and test_labels arrays test the accuracy . Each imaged is mapped to a label. The class names are not included with the dataset, store them here to use later when plotting images: . class_names = [&#39;T-shirt/top&#39;, &#39;Trouser&#39;, &#39;Pullover&#39;, &#39;Dress&#39;, &#39;Coat&#39;, &#39;Sandal&#39;, &#39;Shirt&#39;, &#39;Sneaker&#39;, &#39;Bag&#39;, &#39;Ankle boot&#39;] . Let&#39;s explore the format of the dataset before training the model. The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels: . train_images.shape . (60000, 28, 28) . Likewise, there are 60,000 labels in the training set: . len(train_labels) . 60000 . Each label is an integer between 0 and 9: . train_labels . array([9, 0, 0, ..., 3, 0, 5], dtype=uint8) . There are 10,000 images in the test set. Again, each image is represented as 28 x 28 pixels: . test_images.shape . (10000, 28, 28) . And the test set contains 10,000 images labels: . len(test_labels) . 10000 . The data must be preprocessed before training the network. If you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255: . plt.figure() plt.imshow(train_images[0]) plt.colorbar() plt.grid(False) plt.show() . Scale these values to a range of 0 to 1 before feeding them to the neural network model. To do so, divide the values by 255. It&#39;s important that the training set and the testing set be preprocessed in the same way: . train_images = train_images / 255.0 test_images = test_images / 255.0 . To verify that the data is in the correct format and that you&#39;re ready to build and train the network, let&#39;s display the first 25 images from the training set and display the class name below each image. . plt.figure(figsize=(10,10)) for i in range(25): plt.subplot(5,5,i+1) plt.xticks([]) plt.yticks([]) plt.grid(False) plt.imshow(train_images[i], cmap=plt.cm.binary) plt.xlabel(class_names[train_labels[i]]) plt.show() . Building the neural network requires configuring the layers of the model, then compiling the model. . The basic building block of a neural network is the layer. Layers extract representations from the data fed into them. Hopefully, these representations are meaningful for the problem at hand. . Most of deep learning consists of chaining together simple layers. Most layers, such as tf.keras.layers.Dense, have parameters that are learned during training. . model = tf.keras.Sequential([ tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation=&#39;relu&#39;), tf.keras.layers.Dense(10) ]) . The first layer in this network, tf.keras.layers.Flatten, transforms the format of the images from a two-dimensional array (of 28 by 28 pixels) to a one-dimensional array (of 28 * 28 = 784 pixels). Think of this layer as unstacking rows of pixels in the image and lining them up. This layer has no parameters to learn; it only reformats the data. . After the pixels are flattened, the network consists of a sequence of two tf.keras.layers.Dense layers. These are densely connected, or fully connected, neural layers. The first Dense layer has 128 nodes (or neurons). The second layer returns a logits array with length of 10. Each node contains a score that indicates the current image belongs to one of the 10 classes. . Before the model is ready for training, it needs a few more settings. These are added during the model&#39;s compile step: . Loss function —This measures how accurate the model is during training. You want to minimize this function to &quot;steer&quot; the model in the right direction. | Optimizer —This is how the model is updated based on the data it sees and its loss function. | Metrics —Used to monitor the training and testing steps. The following example uses accuracy, the fraction of the images that are correctly classified. | . model.compile(optimizer=&#39;adam&#39;, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=[&#39;accuracy&#39;]) . Training the neural network model requires the following steps: . Feed the training data to the model. (train_images and train_labels arrays.) | The model learns to associate images and labels. | You ask the model to make predictions about a test set (test_images array) | Verify that the predictions match the labels from the test_labels array. | . To start training, call the model.fit method . model.fit(train_images, train_labels, epochs=10) . Epoch 1/10 . 2023-04-04 11:53:51.070373: W tensorflow/tsl/framework/cpu_allocator_impl.cc:83] Allocation of 188160000 exceeds 10% of free system memory. . 1875/1875 [==============================] - 11s 6ms/step - loss: 0.4959 - accuracy: 0.8268 Epoch 2/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.3762 - accuracy: 0.8651 Epoch 3/10 1875/1875 [==============================] - 10s 6ms/step - loss: 0.3361 - accuracy: 0.8778 Epoch 4/10 1875/1875 [==============================] - 10s 6ms/step - loss: 0.3130 - accuracy: 0.8860 Epoch 5/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2946 - accuracy: 0.8903 Epoch 6/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2816 - accuracy: 0.8958 Epoch 7/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2679 - accuracy: 0.9011 Epoch 8/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2578 - accuracy: 0.9027 Epoch 9/10 1875/1875 [==============================] - 10s 5ms/step - loss: 0.2494 - accuracy: 0.9062 Epoch 10/10 1875/1875 [==============================] - 11s 6ms/step - loss: 0.2393 - accuracy: 0.9107 . &lt;keras.callbacks.History at 0x7f41ac3327f0&gt; . As the model trains, the loss and accuracy metrics are displayed. This model reaches an accuracy of about 0.91 (or 91%) on the training data. . Next, compare how the model performs on the test dataset: . test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2) print(&#39; nTest accuracy:&#39;, test_acc) . 313/313 - 1s - loss: 0.3225 - accuracy: 0.8908 - 1s/epoch - 3ms/step Test accuracy: 0.8907999992370605 . It turns out that the accuracy on the test dataset is a little less than the accuracy on the training dataset. This gap between training accuracy and test accuracy represents overfitting. Overfitting is when a machine learning model performs worse on new, previouly unseen inputs than on the training data. . With the model trained, you can use it to make predictions about some images. Attach a softmax layer to convert the model&#39;s linear outputs (logits) to probabilities, which should be easier to interpret. . probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()]) . predictions = probability_model.predict(test_images) . 313/313 [==============================] - 1s 3ms/step . Here, the model has predicted the label for each image in the testing set. Let&#39;s take a look at the first prediction: . predictions[0] . array([1.7737974e-10, 9.8017128e-10, 2.4250555e-08, 2.7087502e-10, 3.3816602e-11, 7.0955430e-04, 1.5008560e-09, 2.1424549e-02, 2.1235054e-09, 9.7786587e-01], dtype=float32) . A prediction is an array of 10 numbers. They represent the model&#39;s &quot;confidence&quot; that the image corresponds to each of the 10 different articles of clothing. You can see which label has the highest confidence value: . np.argmax(predictions[0]) . 9 . So, the model is most confident that this image is an ankle boot, or class_names[9]. Examining the test label shows that this classification is correct: . test_labels[0] . 9 . Graph this to look at the full set of 10 class predictions. . def plot_image(i, predictions_array, true_label, img): true_label, img = true_label[i], img[i] plt.grid(False) plt.xticks([]) plt.yticks([]) plt.imshow(img, cmap=plt.cm.binary) predicted_label = np.argmax(predictions_array) if predicted_label == true_label: color = &#39;blue&#39; else: color = &#39;red&#39; plt.xlabel(&quot;{} {:2.0f}% ({})&quot;.format(class_names[predicted_label], 100*np.max(predictions_array), class_names[true_label]), color=color) def plot_value_array(i, predictions_array, true_label): true_label = true_label[i] plt.grid(False) plt.xticks(range(10)) plt.yticks([]) thisplot = plt.bar(range(10), predictions_array, color=&quot;#777777&quot;) plt.ylim([0, 1]) predicted_label = np.argmax(predictions_array) thisplot[predicted_label].set_color(&#39;red&#39;) thisplot[true_label].set_color(&#39;blue&#39;) . With the model trained, you can use it to make predictions about some images. . Let&#39;s look at the 0th image, predictions, and prediction array. Correct prediction labels are blue and incorrect prediction labels are red. The number gives the percentage (out of 100) for the predicted label. . i = 0 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() . i = 12 plt.figure(figsize=(6,3)) plt.subplot(1,2,1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(1,2,2) plot_value_array(i, predictions[i], test_labels) plt.show() . Let&#39;s plot several images with their predictions. Note that the model can be wrong even when very confident. . # Color correct predictions in blue and incorrect predictions in red. num_rows = 5 num_cols = 3 num_images = num_rows*num_cols plt.figure(figsize=(2*2*num_cols, 2*num_rows)) for i in range(num_images): plt.subplot(num_rows, 2*num_cols, 2*i+1) plot_image(i, predictions[i], test_labels, test_images) plt.subplot(num_rows, 2*num_cols, 2*i+2) plot_value_array(i, predictions[i], test_labels) plt.tight_layout() plt.show() . Finally, use the trained model to make a prediction about a single image. . img = test_images[1] print(img.shape) . (28, 28) . tf.keras models are optimized to make predictions on a batch, or collection, of examples at once. Accordingly, even though you&#39;re using a single image, you need to add it to a list: . img = (np.expand_dims(img,0)) print(img.shape) . (1, 28, 28) . Now predict the correct label for this image: . predictions_single = probability_model.predict(img) print(predictions_single) . 1/1 [==============================] - 0s 52ms/step [[1.0949210e-05 4.1276347e-11 9.9810290e-01 1.2848138e-10 1.0825287e-03 1.3133799e-13 8.0366491e-04 1.1366387e-15 3.2978012e-10 1.3686339e-15]] . plot_value_array(1, predictions_single[0], test_labels) _ = plt.xticks(range(10), class_names, rotation=45) plt.show() . tf.keras.Model.predict returns a list of lists, one list for each image in the batch of data. Grab the predictions for our (only) image in the batch: . np.argmax(predictions_single[0]) . 2 . And the model predicts a label as expected. .",
            "url": "https://kkcbal.github.io/amongus/jupyter/week-28/2023/04/03/TenserFlow.html",
            "relUrl": "/jupyter/week-28/2023/04/03/TenserFlow.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Lesson Plan Outline",
            "content": "Overview . Teach about Data Analysis, predicitive Analysis, Tenser Flow, Pandas, Numpy | . Topics . Data Analysis including Numpy and Pandas (Big Idea 2). Learn something that is a hot technlogy. Data Analysis | Predcitive Analysis | Tenser Flow | Pandas | Numpy | . | . Plan for Lesson . Definitions of each topic | Examples of both that show how it’s used in the real world | Practice problems that everyone needs to participate in ( candy for correct answers ) | . Plan for Hacks . Practice problems ( Also create your own ) | Create a diagram showing what you have learned about the topics above | Notes of each question answered | . Grading . 0.4 for the Diagram | 0.3 for Practice Problems | 0.2 for Notes | 0.1 for extra credit ( Still figuring out what we are going to do for extra credit) | . . .",
            "url": "https://kkcbal.github.io/amongus/fastpages/markdown/2023/04/02/projectplan.html",
            "relUrl": "/fastpages/markdown/2023/04/02/projectplan.html",
            "date": " • Apr 2, 2023"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": ". Unit 7: Trimester 3 Data Structures . Trimester 3 is taught following college course requirements for CS113 Data Structures. Topics, using Python, include searching, sorting, hashing, algorithms, analysis, object-oriented design, collections, lists, stacks, queues, trees, sets, dictionaries, and graphs. These weeks will also include the a focus on preparations for the May 2nd Create Performance Task and the May 8th Exam. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 25 | | | | | . 26 | | | | | . 27 | | | | | . 28 | | - Data Analysis and Predcitive Analysis - Data Analysis and Predcitive Analysis | | | . 29 | | | | | . 30 | | | | | . . Unit 1: Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 0 | | | | | . 1 | | | | | . 2 | | | | | . 3 | | | | | . . Unit 2: Introduction to Web Development . Websites are made up of several key parts: Frontend, Backend, Data and Deployment. The focus for these weeks is to enable students to perform the aspects of constructing and deploying a simple Website. Fastpages got us started on these concepts, but now we will start building a Website from the ground up. Once again, there will be a lot of learning focused tools and getting things working. But, by the end of the Unit, students will be ready to start many of the technical coding aspects of Web Development, having established a Deployed Website. On Nov 3rd our Trimester work will end with a project and student participation in Electives Department “Night at the Museum” (N@tM). . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 4 | | | | | . 5 | | | | | . 6 | | | | | . 7 | | | | | . . Unit 3: N@tM Project, Web, Systems, and Data . The beginning of Trimester 2 is focussed on Algorithms and Coding. Student need to build their own portfolio. That portfolio should focus on their interests in Python and JavaScript programming. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 8 | | | | | . 9 | | | | | . 10 | | | | | . 11 | | | | | . 12 | | | | | . . Unit 4: Algorithmic Programming . Trimester 2 begins with student teaching and a focus on algorithms. Each week a “Student Team” has a teaching assignment supported by College Board materials. Additionally, the Teacher is providing Career Tech mini-labs that correspond to one or more topics for the week. Use the two things together as you improve your learning experience, Frontend blog and Jupyter Notebooks. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 13 | | | | | . 14 | | | | | . 15 | | | | | . 16 | | | | | . . Unit 5: Intro to OOP, Databases, and Backend Programming . Trimester 2 continues with student learning OOP and immediately applying it to Databases. Each week a “Student Teams” will be working on frontend and backend elements for their Create Performance Task (CPT). GitHub pages will be focus of instruction for frontend, OOP in Python will be instruction provided to create a database which will help exceed every CPT requirement. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 17 | | | | | . 18 | | | | | . 19 | | | | | . 20 | | | | | . . Unit 6: Trimester 2 N@tM and finish CPT . Trimester 2 concludes with student presenting their CPT project at N@tM. Each person within “Student Teams” will have their own specialty within the student project that satisfied all their Create Performance Task requirements. Student should be able to talk about design, coding, and present features of their portion of the system. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 21 | | | | | . 22 | | | | | . 23 | | | | | . 24 | | | | | . . Unit 8: Trimester 3 AP Weeks . Trimester 3 contains AP weeks, where activities will be focused on supporting students in test preparations. Day before a test can be used to study for exam in another class. Days that are not focused on test preparation will be focused on planning for year end project/portfolio. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 31 | | | | | . 32 | | | | | . 33 | | | | | . . Unit 9: Trimester 3 Data Structures (continued) . Trimester 3 finishes with a focus on presenting accomplishments for the year at the year end Night at the Museum. These last 2 to 3 weeks will serve as the year end final exam. . . Week Sprint/Points Link AP Test Prep Career Tech Human Prep . 34 | | | | | . 35 | | | | | . 36 | | | | | .",
          "url": "https://kkcbal.github.io/amongus/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kkcbal.github.io/amongus/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}